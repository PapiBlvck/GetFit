rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidString(text, minLen, maxLen) {
      return text is string && text.size() >= minLen && text.size() <= maxLen;
    }
    
    function isValidNumber(num) {
      return num is number && num >= 0;
    }

    // ==================== ARTIFACTS COLLECTION (NEW APP STRUCTURE) ====================
    match /artifacts/{appId}/users/{userId}/{document=**} {
      // Allow read/write for authenticated users accessing their own data
      // OR allow demo users (userId starts with 'demo-')
      allow read, write: if isOwner(userId) || userId.matches('demo-.*');
    }
    
    // ==================== USERS COLLECTION ====================
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);
      
      // Users can create their own profile on first sign-in
      allow create: if isOwner(userId) 
        && isValidString(request.resource.data.email, 3, 100)
        && isValidString(request.resource.data.displayName, 1, 100);
      
      // Users can update their own profile
      allow update: if isOwner(userId);
      
      // Users cannot delete their profile (handled by Cloud Functions)
      allow delete: if false;
    }
    
    // ==================== ACTIVITIES COLLECTION ====================
    match /activities/{activityId} {
      // Users can read their own activities
      allow read: if isOwner(resource.data.userId);
      
      // Users can create their own activities
      allow create: if isOwner(request.resource.data.userId)
        && request.resource.data.type in ['run', 'walk', 'cycle', 'swim', 'other']
        && isValidNumber(request.resource.data.distance)
        && isValidNumber(request.resource.data.duration)
        && isValidNumber(request.resource.data.calories);
      
      // Users can update their own activities
      allow update: if isOwner(resource.data.userId);
      
      // Users can delete their own activities
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ==================== WORKOUTS COLLECTION ====================
    match /workouts/{workoutId} {
      // Users can read their own workouts
      allow read: if isOwner(resource.data.userId);
      
      // Users can create their own workouts
      allow create: if isOwner(request.resource.data.userId)
        && isValidString(request.resource.data.title, 1, 200)
        && request.resource.data.difficulty in ['Beginner', 'Intermediate', 'Advanced']
        && isValidNumber(request.resource.data.duration)
        && isValidNumber(request.resource.data.calories);
      
      // Users can update their own workouts
      allow update: if isOwner(resource.data.userId);
      
      // Users can delete their own workouts
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ==================== MEALS COLLECTION ====================
    match /meals/{mealId} {
      // Users can read their own meals
      allow read: if isOwner(resource.data.userId);
      
      // Users can create their own meals
      allow create: if isOwner(request.resource.data.userId)
        && request.resource.data.type in ['breakfast', 'lunch', 'dinner', 'snack']
        && isValidString(request.resource.data.name, 1, 200)
        && isValidNumber(request.resource.data.calories);
      
      // Users can update their own meals
      allow update: if isOwner(resource.data.userId);
      
      // Users can delete their own meals
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ==================== WATER INTAKE COLLECTION ====================
    match /water_intake/{intakeId} {
      // Users can read their own water intake
      allow read: if isOwner(resource.data.userId);
      
      // Users can create/update their own water intake
      allow write: if isOwner(request.resource.data.userId)
        && request.resource.data.glasses is int
        && request.resource.data.glasses >= 0
        && request.resource.data.glasses <= 20;
    }
    
    // ==================== HEALTH METRICS COLLECTION ====================
    match /health_metrics/{metricId} {
      // Users can read their own health metrics
      allow read: if isOwner(resource.data.userId);
      
      // Users can create their own health metrics
      allow create: if isOwner(request.resource.data.userId)
        && request.resource.data.type in ['weight', 'sleep', 'mood', 'heartRate'];
      
      // Users can update their own health metrics
      allow update: if isOwner(resource.data.userId);
      
      // Users can delete their own health metrics
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ==================== CHALLENGES COLLECTION ====================
    match /challenges/{challengeId} {
      // Anyone authenticated can read challenges
      allow read: if isAuthenticated();
      
      // Anyone authenticated can create challenges
      allow create: if isAuthenticated()
        && isValidString(request.resource.data.name, 1, 200)
        && isValidString(request.resource.data.description, 1, 1000)
        && request.resource.data.createdBy == request.auth.uid;
      
      // Only creator can update/delete challenges
      allow update, delete: if isAuthenticated() 
        && resource.data.createdBy == request.auth.uid;
    }
    
    // ==================== DAILY SUMMARIES COLLECTION ====================
    match /daily_summaries/{summaryId} {
      // Users can read their own summaries
      allow read: if isOwner(resource.data.userId);
      
      // Users can write their own summaries
      allow write: if isOwner(request.resource.data.userId);
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
